// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MyBox.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MyBox_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MyBox_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MyBox_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MyBox_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MyBox_2eproto;
class MyBox;
struct MyBoxDefaultTypeInternal;
extern MyBoxDefaultTypeInternal _MyBox_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::MyBox* Arena::CreateMaybeMessage<::MyBox>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum EColor : int {
  EC_Red = 0,
  EC_Blue = 1,
  EColor_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EColor_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EColor_IsValid(int value);
constexpr EColor EColor_MIN = EC_Red;
constexpr EColor EColor_MAX = EC_Blue;
constexpr int EColor_ARRAYSIZE = EColor_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EColor_descriptor();
template<typename T>
inline const std::string& EColor_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EColor>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EColor_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EColor_descriptor(), enum_t_value);
}
inline bool EColor_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EColor* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EColor>(
    EColor_descriptor(), name, value);
}
// ===================================================================

class MyBox final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MyBox) */ {
 public:
  inline MyBox() : MyBox(nullptr) {}
  ~MyBox() override;
  explicit PROTOBUF_CONSTEXPR MyBox(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MyBox(const MyBox& from);
  MyBox(MyBox&& from) noexcept
    : MyBox() {
    *this = ::std::move(from);
  }

  inline MyBox& operator=(const MyBox& from) {
    CopyFrom(from);
    return *this;
  }
  inline MyBox& operator=(MyBox&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MyBox& default_instance() {
    return *internal_default_instance();
  }
  static inline const MyBox* internal_default_instance() {
    return reinterpret_cast<const MyBox*>(
               &_MyBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MyBox& a, MyBox& b) {
    a.Swap(&b);
  }
  inline void Swap(MyBox* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MyBox* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MyBox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MyBox>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MyBox& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MyBox& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MyBox* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MyBox";
  }
  protected:
  explicit MyBox(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumsFieldNumber = 3,
    kNameFieldNumber = 2,
    kAgeFieldNumber = 1,
    kColorFieldNumber = 4,
  };
  // repeated int32 nums = 3;
  int nums_size() const;
  private:
  int _internal_nums_size() const;
  public:
  void clear_nums();
  private:
  int32_t _internal_nums(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_nums() const;
  void _internal_add_nums(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_nums();
  public:
  int32_t nums(int index) const;
  void set_nums(int index, int32_t value);
  void add_nums(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      nums() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_nums();

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 age = 1;
  void clear_age();
  int32_t age() const;
  void set_age(int32_t value);
  private:
  int32_t _internal_age() const;
  void _internal_set_age(int32_t value);
  public:

  // .EColor color = 4;
  void clear_color();
  ::EColor color() const;
  void set_color(::EColor value);
  private:
  ::EColor _internal_color() const;
  void _internal_set_color(::EColor value);
  public:

  // @@protoc_insertion_point(class_scope:MyBox)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > nums_;
  mutable std::atomic<int> _nums_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int32_t age_;
  int color_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MyBox_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MyBox

// int32 age = 1;
inline void MyBox::clear_age() {
  age_ = 0;
}
inline int32_t MyBox::_internal_age() const {
  return age_;
}
inline int32_t MyBox::age() const {
  // @@protoc_insertion_point(field_get:MyBox.age)
  return _internal_age();
}
inline void MyBox::_internal_set_age(int32_t value) {
  
  age_ = value;
}
inline void MyBox::set_age(int32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:MyBox.age)
}

// string name = 2;
inline void MyBox::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& MyBox::name() const {
  // @@protoc_insertion_point(field_get:MyBox.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MyBox::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MyBox.name)
}
inline std::string* MyBox::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:MyBox.name)
  return _s;
}
inline const std::string& MyBox::_internal_name() const {
  return name_.Get();
}
inline void MyBox::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* MyBox::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* MyBox::release_name() {
  // @@protoc_insertion_point(field_release:MyBox.name)
  return name_.Release();
}
inline void MyBox::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MyBox.name)
}

// repeated int32 nums = 3;
inline int MyBox::_internal_nums_size() const {
  return nums_.size();
}
inline int MyBox::nums_size() const {
  return _internal_nums_size();
}
inline void MyBox::clear_nums() {
  nums_.Clear();
}
inline int32_t MyBox::_internal_nums(int index) const {
  return nums_.Get(index);
}
inline int32_t MyBox::nums(int index) const {
  // @@protoc_insertion_point(field_get:MyBox.nums)
  return _internal_nums(index);
}
inline void MyBox::set_nums(int index, int32_t value) {
  nums_.Set(index, value);
  // @@protoc_insertion_point(field_set:MyBox.nums)
}
inline void MyBox::_internal_add_nums(int32_t value) {
  nums_.Add(value);
}
inline void MyBox::add_nums(int32_t value) {
  _internal_add_nums(value);
  // @@protoc_insertion_point(field_add:MyBox.nums)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
MyBox::_internal_nums() const {
  return nums_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
MyBox::nums() const {
  // @@protoc_insertion_point(field_list:MyBox.nums)
  return _internal_nums();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
MyBox::_internal_mutable_nums() {
  return &nums_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
MyBox::mutable_nums() {
  // @@protoc_insertion_point(field_mutable_list:MyBox.nums)
  return _internal_mutable_nums();
}

// .EColor color = 4;
inline void MyBox::clear_color() {
  color_ = 0;
}
inline ::EColor MyBox::_internal_color() const {
  return static_cast< ::EColor >(color_);
}
inline ::EColor MyBox::color() const {
  // @@protoc_insertion_point(field_get:MyBox.color)
  return _internal_color();
}
inline void MyBox::_internal_set_color(::EColor value) {
  
  color_ = value;
}
inline void MyBox::set_color(::EColor value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:MyBox.color)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EColor> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EColor>() {
  return ::EColor_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MyBox_2eproto

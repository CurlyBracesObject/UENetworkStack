// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MyBox.proto

#include "MyBox.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR MyBox::MyBox(
    ::_pbi::ConstantInitialized)
  : nums_()
  , _nums_cached_byte_size_(0)
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , age_(0)
  , color_(0)
{}
struct MyBoxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MyBoxDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MyBoxDefaultTypeInternal() {}
  union {
    MyBox _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MyBoxDefaultTypeInternal _MyBox_default_instance_;
static ::_pb::Metadata file_level_metadata_MyBox_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_MyBox_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_MyBox_2eproto = nullptr;

const uint32_t TableStruct_MyBox_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MyBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MyBox, age_),
  PROTOBUF_FIELD_OFFSET(::MyBox, name_),
  PROTOBUF_FIELD_OFFSET(::MyBox, nums_),
  PROTOBUF_FIELD_OFFSET(::MyBox, color_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::MyBox)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_MyBox_default_instance_._instance,
};

const char descriptor_table_protodef_MyBox_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013MyBox.proto\"H\n\005MyBox\022\013\n\003age\030\001 \001(\005\022\014\n\004n"
  "ame\030\002 \001(\t\022\014\n\004nums\030\003 \003(\005\022\026\n\005color\030\004 \001(\0162\007"
  ".EColor*!\n\006EColor\022\n\n\006EC_Red\020\000\022\013\n\007EC_Blue"
  "\020\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_MyBox_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_MyBox_2eproto = {
    false, false, 130, descriptor_table_protodef_MyBox_2eproto,
    "MyBox.proto",
    &descriptor_table_MyBox_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_MyBox_2eproto::offsets,
    file_level_metadata_MyBox_2eproto, file_level_enum_descriptors_MyBox_2eproto,
    file_level_service_descriptors_MyBox_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_MyBox_2eproto_getter() {
  return &descriptor_table_MyBox_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_MyBox_2eproto(&descriptor_table_MyBox_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EColor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MyBox_2eproto);
  return file_level_enum_descriptors_MyBox_2eproto[0];
}
bool EColor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MyBox::_Internal {
 public:
};

MyBox::MyBox(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  nums_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:MyBox)
}
MyBox::MyBox(const MyBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nums_(from.nums_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&age_, &from.age_,
    static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&age_)) + sizeof(color_));
  // @@protoc_insertion_point(copy_constructor:MyBox)
}

inline void MyBox::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&age_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&age_)) + sizeof(color_));
}

MyBox::~MyBox() {
  // @@protoc_insertion_point(destructor:MyBox)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MyBox::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
}

void MyBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MyBox::Clear() {
// @@protoc_insertion_point(message_clear_start:MyBox)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nums_.Clear();
  name_.ClearToEmpty();
  ::memset(&age_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_) -
      reinterpret_cast<char*>(&age_)) + sizeof(color_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MyBox::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 age = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MyBox.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 nums = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_nums(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_nums(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .EColor color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_color(static_cast<::EColor>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MyBox::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyBox)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 age = 1;
  if (this->_internal_age() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_age(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MyBox.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated int32 nums = 3;
  {
    int byte_size = _nums_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_nums(), byte_size, target);
    }
  }

  // .EColor color = 4;
  if (this->_internal_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MyBox)
  return target;
}

size_t MyBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MyBox)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 nums = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->nums_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _nums_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 age = 1;
  if (this->_internal_age() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_age());
  }

  // .EColor color = 4;
  if (this->_internal_color() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_color());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MyBox::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MyBox::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MyBox::GetClassData() const { return &_class_data_; }

void MyBox::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MyBox *>(to)->MergeFrom(
      static_cast<const MyBox &>(from));
}


void MyBox::MergeFrom(const MyBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyBox)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  nums_.MergeFrom(from.nums_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_age() != 0) {
    _internal_set_age(from._internal_age());
  }
  if (from._internal_color() != 0) {
    _internal_set_color(from._internal_color());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MyBox::CopyFrom(const MyBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyBox::IsInitialized() const {
  return true;
}

void MyBox::InternalSwap(MyBox* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  nums_.InternalSwap(&other->nums_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MyBox, color_)
      + sizeof(MyBox::color_)
      - PROTOBUF_FIELD_OFFSET(MyBox, age_)>(
          reinterpret_cast<char*>(&age_),
          reinterpret_cast<char*>(&other->age_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MyBox::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MyBox_2eproto_getter, &descriptor_table_MyBox_2eproto_once,
      file_level_metadata_MyBox_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MyBox*
Arena::CreateMaybeMessage< ::MyBox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MyBox >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
